
#1 Как все запускается
# как запустить редис
docker run --name auth-redis --rm -d -p 6379:6379 redis


Сначала нужно запустить сервер Postgres. Легче всего сделать это через его докер-образ
командой docker run --name auth-postgres -d --rm -e POSTGRES_PASSWORD=123 -p 5432:5432 postgres

Потом инициализировать базу psql --username=postgres --host=127.0.0.1 --port=5432 postgres < db_schema.sql

#2 Робота с логином юзера:
---- Параметры login и password передаются странице /login/ как GET-параметры в строке запроса, хотя и методом POST. Это вообще потом стоит исправить. Сейчас для входа в систему нужно командовать
ans = requests.post("http://127.0.0.1:5000/users/login?login=first_user&password=123")
После этого команда ans.json() выведет на экран сгенерированные токены

--- Для обращения к refresh нужно использовать команду
ans = requests.post("http://127.0.0.1:5000/users/refresh", headers={'Authorization': f"Bearer {access_token}"})
Где access_token - это строка access_token или refresh_token (сгодится любая из двух - и это вообще странно), возвращенная в ответе на запрос к /login. В ответ на /refresh вновь возвращается новая пара токенов
Работает, хотя в теории насколько я помню предполагалось, что refresh будет происхдить только по refresh_token и он будет одноразовым





#3для регистр
def register():

registr = requests.post("http://127.0.0.1:5000/users/register", json = {
        "id" : str(uuid.uuid4()),
        "login" : "second_user",
        "email" : "seconduserupdate@ya.ru",
        "password_hash" : "fff",
        "full_name" : "second_useruu",
        "phone" : "123456789",
        "avatar_link" : 'seconduser@ya.ru',
        "address" : 'MSC',
        "created_at" : str(datetime.datetime.now()),
        "updated_at" : str(datetime.datetime.now())
    }
)


#4 для update:

#id = uuid.uuid4()

account = requests.post("http://127.0.0.1:5000/users/account/", json = {
        "id" : str(uuid.uuid4()),
        "login" : "second_user",
        "email" : "seconduserupdatereal@ya.ru",
        "password_hash" : "fff",
        "full_name" : "second_useruu",
        "phone" : "123456789",
        "avatar_link" : 'seconduser@ya.ru',
        "address" : 'MSC',
        "created_at" : str(datetime.datetime.now()),
        "updated_at" : str(datetime.datetime.now())
    }
)



token = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTY1NjY4MjUzNiwianRpIjoiNjJiODIzMGQtMTI5NC00\
YjAzLWI3ZGItNDQwNzVlYTk5Mzg2IiwidHlwZSI6ImFjY2VzcyIsInN1YiI6ImY2MjliMTVmLWRjODMtNDNkNS04NTcxLTFjOWRhZmM\
xNjYyZSIsIm5iZiI6MTY1NjY4MjUzNiwiZXhwIjoxNjU2Njg2MTM2fQ.S4XPOW8B7WpzsA2Ch6vcvzOZru5v6CzMusfT7FzF4hE'



#5 проверка хистори :
/history

ans = requests.get("http://127.0.0.1:5000/users/history", headers={'Authorization': f"Bearer {token}"})


#6проверка logaut

token = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTY1NzAzMDYw\
OCwianRpIjoiZjJhODFkZWEtYzI0NS00MDgzLWI1ZWQtNGQ5MDQ1OWU1OGIyIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6ImNjY2NmZDAwLTNlYjMtNGRjOC1hYzEyLTRjMDdjZGI\
2MjcyMiIsIm5iZiI6MTY1NzAzMDYwOCwiZXhwIjoxNjU3MDM0MjA4fQ.CzZtsE9h0dPk7VLIeuj5umcMpvghM8kSSLbmrqt9plI'



ans = requests.delete("http://127.0.0.1:5000/users/logout", headers={'Authorization': f"Bearer {token}"})

#регистрирую admin_usera
ans = requests.post("http://127.0.0.1:5000/users/login?login=admin_sec&password=123")