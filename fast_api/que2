


I. Часть вопросов по ветке first (теория яндекса)

#1 после запуска мейн не открывается страница http://0.0.0.0:8000/api/openapi и сам мейн не отрабатывает https://disk.yandex.ru/i/T8WevQ2h6iUXeA

Страница http://0.0.0.0:8000/... и не должна открываться, нужно открывать
http://127.0.0.1:8000/... IP-адрес 0.0.0.0 означает "любой адрес". Серверу
можно дать команду его прослушивать, но клиент подсоединиться к нему не
может. Когда Вы даете серверу команду прослушивать адрес 0.0.0.0 это означает
отвечать на обращения к любому IP-адресу сервера даже если их у него несколько
(при этом в качестве альтернативы можно указать определенный IP но это
обычно не делается). А подключаться можно только к определенному IP.

#2 Что знаить эта строчка в файле main @app.on_event('shutdown')

Это означает, что эта функция выполнится перед завершением приложения после
того, как оно получит команду завершиться. Также как @app.on_evenv('startup')
выполнится в самом начале.

#3 У меня по прежнему не видит импорты, я прочитал что нужно указать путь, https://www.geeksforgeeks.org/python-import-module-from-different-directory/
и тут https://blog.finxter.com/python-how-to-import-modules-from-another-folder/

но я добавил такой путь (одинарные слешы на двойные заменил), но ничего не изменилось sys.path.insert(0, 'C:\\Users\\Пользователь\\PycharmProjects\\2.2.YAND_SPRINT_2_NEW_MODELS\\fast_api\\db')
в итоге написал так, вроде не подчеркивает from fast_api.db.elastic import get_elastic


Это в смысле PyCharm не видит или при выполнении не видит?


4# В этой функции что значит  * в параметрах?
def orjson_dumps(v, *, default):
    # orjson.dumps возвращает bytes, а pydantic требует unicode, поэтому декодируем
    return orjson.dumps(v, default=default).decode()

Звездочка в списке аргументов означает, что все параметры, указанные после нее, должны идти
по имени а не по порядку. То есть orjson_dumps вызывается с двумя аргументами v и default,
но нельзя написать orjson_dumps(v, d), нужно писать orjson_dumps(v, default=d). Это
разумно, когда у функции много аргументов, порядок которых трудно запомнить.

#5 Кешировать ответы ручек, запрошенных с одинаковыми параметрами ---- Что значит ручки?

Видимо, от слова route - в общем, API-функции, я так понял.

#почему в файле db.redis вот такой тип   redis: Optional[Redis] = None   -вопрос, почему =None?


Такая конструкция означает, что переменная redis инициализируется значением None, а после
может принимать значение типа Redis, либо None. Ее инициализация - присвоение значения,
отличного от None - потом происходит в функции startup в файле main.py


#6 что значит эта приписка в main @app.on_event('shutdown')? а также строчка 'main:app' - означает что запускается app из майн? Если да то почему так странно написано?

Да, строчка main:app означает, что запускается приложение в переменной app модуля main. Синтаксис
странный, но почему-то он сделан таким. Вопрос про @app.on_event('shutdown') уже был. Это декоратор
для функции, которая будет выполнена перед остановкой приложения.

#7. В файле models.film.py  - не совсем понимаю как работает встроенный класс Config? Он дочерний по отношению к Film и что он делате?
Также тут в классе Film есть description при этом в v1/films.py его нет?
class Film(BaseModel):
    id: str
    title: str
    description: str

    class Config:
        # Заменяем стандартную работу с json на более быструю
        json_loads = orjson.loads
        json_dumps = orjson_dumps

Класс Config является вложенным в класс BaseModel и может переопределяться в классах, производных
от BaseModel. В нем в частности задаются функции, используемые для чтения и записи объекта в
Json и их можно переопределить. Мы в частности тут переопределили orjson_dumps, вроде, чтобы
возвращать тип str а не bytes - вот в классе Config внутри класса производного от BaseModel
указываются переопеделения функций используемых для сериализации объекта. Вообще назначение
этого класса похоже не назначение класса Meta в моделях Django - он хранит параметры самого
класса, а не объектов этого класса.

#8 Я же правильно понимаю что async def get_by_id(self, film_id: str) -> Optional[Film]:
строка ->Optional[Film] - это как бы комментарий к коду и он не обязывает возвращать именно объект класса film?

Ну да, вроде бы ошибки выполнения не произойдет если вернуть что-то другое. Если точно,
то Optional[Film] означает, что возвращается значение типа Film, либо None. Но в текущей
версии Питона, по крайней мере, значение другого типа вернуть все-таки можно

#9 В файле services/films:
async def _get_film_from_elastic(self, film_id: str) -> Optional[Film]:
    try:
        doc = await self.elastic.get('movies', film_id)

Это какая то встроенная утилита что можно просто вызвать elastic.get и получить  информацию по film_id?
Что в данном случае представляет movies? Это же название базы для постгрес?

Это название базы для Postgres, но также и навзание индекса для Elastic, и тут информация берется
именно из Эластика. Никаких обращений к Постгресу в модуле fast_api, вроде бы, нет.

№10. Аналогичный вопрос для redis? Я так понимаю тут в теории вообще для redis ничего еще не успели написать (никаких методов) тогда как из него получаеют (в теории это называется
получить данных из кэша)
data = await self.redis.get(film_id)
и также положить данные в КЭШ(он же редис)
await self.redis.set(film.id, film.json(), expire=FILM_CACHE_EXPIRE_IN_SECONDS)


Это в объекте FilmService? Там значение self.redis инициализируется параметром
конструктора - метода __init__ класса FilmService. Он вызывается из функции
get_film_service, которая и получает параметром ссылку на redis, которая будет
использоваться. В свою очередь, в параметрах get_film_service указано, что
по умолчанию аргумент redis равен значению, возвращаемому get_redis.


#11 Еще раз уточните плз как работает эта строка :
# Внедряем FilmService с помощью Depends(get_film_service)
@router.get('/{film_id}', response_model=Film) в файле v1/films?


Это декоратор для функции, которая вызывается по строке запроса /ИДЕНТИФИКАТОР_ФИЛЬМА
и возвращает Json-представление объекта Film, которое будет возвращено клиенту.


#12 Я опять пытался просто запушить все файлы в ветку и через git commi -a и через git commit -m но все равно ничего не вышло, как все таки сделать, чтобы не приходилось
много файлов через add добавлять?


Можно теоретически попробоавть git add . чтобы добавить все содержимое текущего каталога.
Или git add <имя_каталога> чтобы добавить содержимое каталога. Но так возможно будет добавлено
много лишнего.



II. Часть вопросов по ветке another_particip (проект другого участника)
1. В файле v1.film.py  список жанров получается через
genre_list = [FilmGenreApi(uuid=genres.get("id"), name=genres.get("name")) for genres in film.genres or []]
Но я так понял что film Это : film = await film_service.get_by_id(film_id)
Но в ilm_service.get_by_id нет такого метода genres или чего то подобного ? - как это работает - такой подход много где у него повторяется например :
    genre_list = [FilmGenreApi(uuid=genres.get("id"), name=genres.get("name")) for genres in film.genres or []]
    actors_list = [FilmPeopleApi(uuid=actor.get("id"), name=actor.get("name")) for actor in film.actors or []]
    writers_list = [FilmPeopleApi(uuid=writer.get("id"), name=writer.get("name")) for writer in film.writers or []]

Так, если film_service имеет тип FilmService, то film_service.get_by_id(film_id) возвращает объекта типа
Optional[Film], данные для которого берет из Elastic. Здесь класс Film определен в models/film.py,
наследую OrjsonModel и в нем как раз таки есть поле genres списочного типа


2. В этом же файле что и выше:
async def film_list_by_genre(sort: Literal["-imdb_rating", "+imdb_rating"] = "-imdb_rating",
                             filter_genre: UUID = Query(None, alias="filter[genre]"),
                             page_size: int = Query(None, alias="page[size]"),
                             page_number: int = Query(None, alias="page[number]"),
                             film_service: FilmService = Depends(get_film_service)
                             ) -> List[FilmBriefApi]:

Что означают параметры в функции (например) sort: Literal["-imdb_rating", "+imdb_rating"] = "-imdb_rating", или page_size: int = Query(None, alias="page[size]"), почему нельзя просто написать : int?
И зачем задавать alias и page_number?

Поле Literal["a", "b", "c"] означает в общем случае, что переменная может принимать одно
из нескольких значений. Если так объявлен параметр у API функции - это значит, что
этот параметр функция принимает как GET-параметр HTTP запроса, который может принимать
одно из значений из списка. Параметр page_size - это также get-параметр. Я так понял,
что Query(None, alias="page[size]") означает, что этот параметр передается в запросе
как GET /.../?page[size]=value, то есть "page[size]" - это название GET-параметра.
Переменную в Питоне так назвать нельзя, поэтому название для GET-параметра передается
хитрым способом. То что первый аргумент у Query равен None означает, что значение
параметра по умолчанию равно None

2.1.И там далее в services когда эти же параметры что и выше передаются в функцию  - они уже описываются более кратко - почему?
async def _get_films_from_cache(self,
                                filter_genre: Optional[UUID],
                                sort: Optional[str],
                                page_size: Optional[int],
                                page_number: Optional[int]
                                ) -> List[FilmBrief]:
    key = self._get_films_key(filter_genre, sort, page_size, page_number)
    data = await self.redis.get(key)

Функция _get_films_from_cache - это уже не API-вызов а внутренний вызов системы, то
есть вызов обычной питоновской функции. Так что параметр вида Query(None, alias="page[size]")
в нее не передается. В обычной функции просто объявляются типы аргументов, а в API-функции
типы аргументов еще могут иметь свойства, специфичные для fast_api.

2.2. И как работает вот это?:
self.redis.get(key)? Там же в ключ передается filter_genre, sort, page_size, page_number

Там ключ это вроде значение возвращаемое методом _get_films_key, которая как раз таки
преобразует весь этот набор значений в одну строку.

3. Вы по этому спринту что делали? Могли бы свою релизацию в отдельную ветку выложить, может у Вас по понятнее и проще будет , я посмотрю

4. Верно ли что fast_api В принципе должна быть внутри папки movies (проект)?

Да нет, это не обязательно. Я бы по крайней мере так не делал.

5.Могли бы Вы напомнить почему где то в докер-компоуз есть блок билд а где то нет? build: и что значит блок  context: postgres_to_es (например в блоке для etl: context: postgres_to_es)

Там где нет блока build - это означает, что контейнер не собирается из локальных файлов, а
скачивается из Докерхаба или тому подобного источника. Так скачиваются образы для nginx
и postgres. А если есть блок build, то context - это директория, в которой находятся
файлы, из которых собирается образ.

6. Что в файле movies_admin/dockerfile значат эти строки (EXPOSE - я так понимаю порт но почему так написан) и я не нашел такую директорию /code?

FROM python:3.10
EXPOSE 8000
WORKDIR /code

Директория /code создается автоматически внутри файловой системы контейнера и
именно в ней выполняется команда, которая задана как command

7.У Вас возможности созвониться так и нет?
8. Как в реале выглядят эти команды? :
command: python etl.py
command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
command: ["python", "main.py"]

Если command - это список строк, то соедините строки через пробел
command: ["python", "main.py"]
будет выполнена как
python main.py

9. В докерфайле для фастапи есть строка COPY requirements.txt /fast_api/ но ведь сам requirements находится в той же папке что и fast_api?

Это копирование из локальной файловой системы в файловую систему проекта. Обратите внимание,
что COPY requirements.txt /fast_api/
а не
COPY requirements.txt fast_api/
то есть файл копируется в папку /fast_api/, в корневом каталоге файловой системы
контейнера.

10. В докерфайле для редис есть такая строка #RUN ["redis-server", "/usr/local/etc/redis/redis.conf"]
Я правильно понимаю что она закомментирована ?

11. В файле es.env.example такая строка:  discovery.type=single-node - что она значит
и как догадаться что нужно именно эту строку писать и где посмотреть эту информацию?

12. У другого участника в каждой папке (fast_api, postgres_to_es) и так далее
свои requirements - разве нельзя сделать 1 файл с requirements котоырй потом устанавливать
в каждом докерфайле для каждого приложения?

Если один сервис работает на FastAPI а другой на Django, то разумнее будет устанавливать
в контейнер с каждым сервисом только те библиотеки, которые нужны только этому сервису.
Так контейнеры собираются быстрее и размером меньше. А иногда случается, что разным
сервисам нужны разные версии одной библиотеки - тогда установить их в один контейнер
не получится.

13. Путь для volumes в redis  указан как
    volumes:
      - ./redis/conf/etc:/usr/local/etc/redis
 Если первая часть до : - это расположение в папке проекта, то где найти
 вторую часть: /usr/local/etc/redis? Как понять где ее брать?

Вторую часть можно писать произвольно. Это путь в файловой системе внутри контейнера,
в котором структуру Вы можете установить сами.

14. Аналогичный вопрос для fast_api:

    volumes:
      - ./fast_api:/fast_api:ro

15. Что значит эта строка в fast_api (если в ней и так есть requirements) то зачем
их копировать (если это копирование )
COPY requirements.txt /fast_api/

Опять же - это копирование локального файла в файловую систему контейнера

III. Третья часть вопросов:

16.Как формируется network: movies_network в докере и где в каких файлах она определяется? Там вроде нужно указавать порты и как то их в сеть
объединять но я не нашел это нигде
17. Докер файл который в корне проекта - он к чему относится? https://disk.yandex.ru/i/Pm_TaNRyEIKLig В нем как раз назначается 8010 порт - это к джанге?
Если сейчас все докер файлы я хочу разместить в папке приложения то его нужно куда перенести?


18. #1 после запуска мейн не открывается страница http://0.0.0.0:8000/api/openapi и сам мейн не отрабатывает https://disk.yandex.ru/i/T8WevQ2h6iUXeA

Страница http://0.0.0.0:8000/... и не должна открываться, нужно открывать
http://127.0.0.1:8000/... IP-адрес 0.0.0.0 означает "любой адрес". Серверу
можно дать команду его прослушивать, но клиент подсоединиться к нему не
может. Когда Вы даете серверу команду прослушивать адрес 0.0.0.0 это означает
отвечать на обращения к любому IP-адресу сервера даже если их у него несколько
(при этом в качестве альтернативы можно указать определенный IP но это
обычно не делается). А подключаться можно только к определенному IP.

ДОПОЛНЕНИЕ:
По теории ведь в мейн указывается 4 нуля, но даже если поставить 127...  - все равно вне открывается - Вы можете в той версии ветки что есть на гите
запустить?

19.Все исполнение (получение данных из эластика и запись в него ) идет в файле v1/films который использует функции из services/films
Но мне не понятно, где при запуске main это все цепляется? Как мне выполнить функцию из v1/films?
я добавил выполнение функции в v1/films через
# if __name__ == '__main__':
#     film_details()

- Но не могу понять как передать туда второй аргумент film_service: FilmService = Depends(get_film_service)?

Это значит, что film_service инициализируется значением, возвращенным get_film_service. Эта функция в
свою очередь вызывает FilmService(get_cache(), get_storage()). Функции get_cache, get_storage определены
в db/cache.py и db/storage.py. Функция get_cache возвращает RedisCache(await get_redis()), а
функция get_storage - ElasticStorage(await get_elastic()). В свою очередь функция get_elastic
возвращает объект db.elastic.es, который инициализируется в функции startup в файле main.py.
Там же инициализируется и объект db.cache.redis, который возвращается get_redis(). Да, явно
получилось слишком запутанно, я бы делал по другому. В общем нужно создать объекты
redis и elastic так, как они инициализируются в функции startup в файле main.py.
А затем создать film_service так:

film_service = FilmService(RedisCache(redis), ElasticStorage(elastic)).



20. Что значат minsize=10, maxsize=20 в :
redis.redis = await aioredis.create_redis_pool((config.REDIS_HOST, config.REDIS_PORT), minsize=10, maxsize=20)?

Вызов create_redis_pool создает сразу несколько соединений с сервером кэширования Redis, чтобы в несколько
потоков загружать объекты в кэш и качать из кэша. Параметры minsize и maxsize - это минимальное и максимальное
количество одновременно устанавливаемых соединений. Вообще неразумно давать minsize значение отличное от 1.


21. Как мне просто где нибудь в отдельном файле выполнить вот эту функцию?
self.elastic.get('movies', film_id)

Переменная self.elastic тут видимо имеет тип AsyncElasticSearch - это ссылка на db.elastic.es,
который создается в main.py вызовом
elastic.es = AsyncElasticSearch(hosts=[f"{config.ELASTIC_HOST}:{config.ELASTIC_PORT}"])
если создавать ее не в контейнере, то нужно создать
es = AsyncElasticSearch(hosts=["127.0.0.1:9200"])
и далее
es.get('movies', film_id)


22. У меня не запустился докер а именно из за фаст апи
https://disk.yandex.ru/i/rgqXadTOgXZo6g
https://disk.yandex.ru/i/_w5jQGKTgi0rWw

Для начала в файл fast_api/Dockerfile добавить следующие 2 строчки

apt-get update
apt-get install cargo -y

перед строчкой

pip install --upgrade pip


23. В папке db есть файлы cashe.py и storage.py - они где то используются или это просто наработки?
24.В файле services/film есть функция
    def _get_films_key(self, *args):
        key = ("films", args)
        return str(key)

 получается она возвращает строку : "films, arg1, arg2 ...."
 Потом это все используется выше в
         key = self._get_films_key(filter_genre, sort, page_size, page_number)
        json = "[{}]".format(','.join(film.json() for film in films))
        await self.redis.set(key, json, expire=FILM_CACHE_EXPIRE_IN_SECONDS)

 Я правильно понимаю что это просто таким образом формируется составной ключ для записи в редис?
25. Не поднимается докер теперь
26. Не могу вытянуть данные из редиса

27. данный вопрос видео - касается функции services/film _get_films_by_genre_from_elastic

28. Как в ipython проверить выполнение функции _get_films_by_genre_from_elastic из services/film _get_films_by_genre_from_elastic ну или не через ipython а просто ее вызвать?

30. Вопрос про sorting https://disk.yandex.ru/i/Es2ZneuHkXxSWg
31. Для чего нужен абстрактный класс?
32. что дает @abstractmethod перед функцией?
33. Что означает  @property перез функцией?
34. Что выполняет это код es_client.bulk(...) - я правильно понимаю что это просто быстрая запись в индекс эластика (то есть встроенный в эластик метод
сохранения инфы?)
35. Как работать со свагером?
36. В пятом спринте в теории идет речь об rest api - я так и не понял чем он отличается от того api что есть сейчас и в каком спринте и папке можно на него посмотреть?
37. В 5 спринте кроме папок фаст_апи и tests  - что то правилось?

http://localhost:8000/api/openapi

38. В тестах elastic_search.indices.delete("genres") и elastic_search.indices.create
indices.delete и indices.create - это встроенные методы эластик?
39. Как в данном случае работает поле Field es_host: str = Field("elastic:9200", env="ELASTIC_HOST")?
40. В папке src/test_film используются методы функции make_get_request(f"/film/{doc['id']}")  - но я не видел нигде импорта этой функции make_get_request
и где она сама?
41. Не увидел где связь в файле conftest и файлами в папке src?


42. То есть основные функции в SRC. В файле conftest - просто функции по созданию тестовых данных в эластике?
43. Как обеспечивается параллельный запуск тестов до начала запуска основых конейнеров  (с эластик и так далее) если для тестов отдельный ямл и в основном докер-компоузе
нет ничего о тестах?
44.В файле conftest  - как работает этот код и как что такое get_event_loop_policy()?:
loop = asyncio.get_event_loop_policy().new_event_loop()
45. (такой вопрос уже задаывал но пока вроде не было ответа) - как тут рабоатет поле Field es_host: str = Field("elastic:9200", env="ELASTIC_HOST")?
46. В папке src в функции
@pytest.mark.asyncio
async def test_some_film(some_film, make_get_request):
    """Проверяем, что тестовый фильм доступен по API"""
    # Считать из файла с данными параметры тестового фильма
    with open("testdata/some_film.json") as docs_json:
        docs = json.load(docs_json)
        doc = docs[0]
    # Проверить, что данные, возвращаемые API, совпадают с теми что
    # в файле с тестовыми данными
    response = await make_get_request(f"/film/{doc['id']}")
    assert response.status == HTTPStatus.OK
    data = response.body
    assert data["uuid"] == doc["id"]
    assert data["title"] == doc["title"]
    assert data["imdb_rating"] == doc["imdb_rating"]


откуда берется функция make_get_request? Я нигде не вижу ее импорта?

47. Фикстура возвращает функцию inner , то есть на HTML респонс у которого можно прочитать .json() или body() а именно функцию, тогда вопрос
как получить из этой функции тот же json(), body() и так далее?
Вот как это получается, если в return innner data = response.body?
@pytest.fixture
def make_get_request(session):
    async def inner(method: str, params: Optional[dict] = None) -> HTTPResponse:
        params = params or {}
        url = SERVICE_URL + '/api/v1' + method  # в боевых системах старайтесь так не делать!
        async with session.get(url, params=params) as response:
          return HTTPResponse(
            body=await response.json(),
            headers=response.headers,
            status=response.status,
          )
    return inner

48. В какой момент запускаются файлы из папки utils? Я не нашел их связи в cinftest
49. В ямл файле для эластика указан вот такой имадж:
image: docker.elastic.co/elasticsearch/elasticsearch:7.15.1-arm64
Откуда вы взяли такое название и я так понимаю это адрес страницы в интернете или как? Почему тогда без http?
Можно просто написать тот image который для эластика в другом ямл файле mage: elasticsearch:7.7.0?
50. Не знаю будет ли клитично при запуске но пока не подчеркивает импорты https://disk.yandex.ru/i/QMa3b0JgZI6MEQ
51. В файле test_film_cahse  Вот такая строка, но в файле conftest не нашел где там данные в редис пишутся?
cached = await redis.get(f"{doc_id}")
52. В test_person
    """Тест запускается с пустым индексом и API должен вернуть ошибку 404"""
    response = await make_get_request("/person/")

Индекс пустой потому что в conftest ничего по этому пути не создавалось никакой фикстурой ничего?
53. При запуске тестов вот такая надпись
https://disk.yandex.ru/i/4vOMpNL4CqDqug



